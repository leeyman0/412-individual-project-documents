#+TITLE: Turn-Based World Tournament --- Software Project Management Plan
#+AUTHOR: Stanley C. Kemp
#+OPTIONS: toc:nil
* Introduction
** Project Overview
 This project is to create a small browser-based game that is similar in distribution style to [[https://agar.io]].
The program should be easy and simple to run on many machines, the ones that support the underlying technologies 
of websockets and the 2D canvas should do it. The game should be made with accessibility and fun in mind, and there 
should be multiplayer interactivity.

When coming up with the idea for this website,
I thought: what do people usually lack when trying to play online games? Skill, to be sure, but other than that
the main problem is lag. This can be very challenging to play past when participating in games like /Fortnite/ or
online fighting games. Most of the world lives with low-quality internet, or no internet at all. 

Turn-based games do not necessarily have these problems, or not in large quantities. But often, they have complex
mechanics that are inaccessible to some people, especially children. So, the idea I had was to make 
a simple turn-based physics-based strategic fighting game, where a player would control the muscles of their own
player in order to deplete the health-bar of the enemy, or defend themselves from some enemy.
** Project deliverables --- Work Breakdown Structure
*** TODO General Project Organization [2/4] by March 31
    DEADLINE: <2021-03-31 Wed>
    - [X] Tool Selection
    - [ ] Component Graphs
    - [X] Fill out SPMP
      - [X] Timeline
    - [ ] Sign-off
*** TODO Working Server/Client [0/3] by April 15
    DEADLINE: <2021-04-15 Thu>
    - [-] Get game internals working
      - [-] Connection
	- [ ] HTTPS connection
	- [X] WebSocket connection
	- [ ] 
      - [-] Matchmaking
	- [X] Get server to make matches without many race conditions
	- [X] Tell people who their partner is
	- [ ] Requeue people when they are
      - [ ] Game [0/2]
	- [ ] Server
	  - [ ] Transmission of turns to the other player
	  - [ ] Sanitization of data
	- [ ] Client
	  - [ ] Application of data
	  - [ ] Recognition of current game state
    - [-] Get graphics and a user interface working
      - [ ] Buttons
      - [-] Time limit
	- [X] Decide whether a time limit is really necessary.
	- [ ] Implement time limit
	- [ ] Synchronize from server to client
	- [ ] Implement server-client connection diagnosis through the ping.
      - [ ] Canvas Display [0%]
	- [ ] Display Components of models
	- [ ] Display current Health
    - [ ] Implement a physics engine
      - [ ] Implement Bricks
	- Weight
	- Friction
	- Velocity
	- Rotation
	- Acceleration
	- Momentum
      - [ ] Implement Gravity
      - [ ] Implement Joints and Structures
*** TODO Working Website [0/2] by April 24
    DEADLINE: <2021-04-24 Sat>
    - [ ] Register a domain and hosting
      - [ ] Upload ~index.html~ and ~index.js~ frontend to the server
      - [ ] Register for Back-end hosting with ~Heroku~
      - [ ] Figure out how to connect the front-end to the back-end and then do it.
    - [ ] Test it to make sure it works
** Reference Materials
* Project Organization
This is a one-man-project, so not much time was spent on either Managerial Process or Project Organization.
I usually take this apprioach to projects --- if it slows me down, I lose it, and if it speeds me up, I use it.
However, with a project on the magnitude such as this one, some elaboration is needed.
** Process Model
The software process model I have chosen is the chaos model. The chaos model manages complexity by breaking
problems into smaller sub-problems. There are two main rules to the chaos model of development.
The first rule is, to solve big problems, solve the smaller problems that they rely on first, 
then solve the intermediate problems that lead to the big problem being solved. The second rule is
always work on the biggest issue first.
** Organizational Structure
The model of the type of this organization is self-employment.
** Organizational Interfaces
*** Relationship to Hosting Services
The hosting services are going to be alright, as long as I pay them for their work. If enough people join, I
might have to upgrade the hosting to a bigger Dyno for Heroku, and I might have to upgrade hosting for the frontend
as well.
*** Relationship to Players of The Game
The relationship to the community of this game is very important, as it is an online game community, and if they
aren't happy, they will go somewhere else.
** Project Responsibilities
- Deliver a smooth gaming experience
  - Deliver a quick gaming experience
- Deliver an accessible gaming experience
- Be responsive to user feedback --- What needs fixing?
* Managerial Process
** Change Management
To manage change in the development process, all serious technological changes will be made before programming.
Minor changes can be made during the development process, of course, but once I am set on a method, tool,
or technique, I cannot change it.

*Addendum: Apr 21, 2021.*
Because of unforseen issues with developing the game, I have decided to make a different game that is easier to
implement. More changes to the project check list will come soon.
* Technical Process
** Methods, Tools, and Techniques
I plan to use these tools on this project:
+ Javascript
  + ~Node.js~ --- server backend framework for Javascript
    + ~npm~ --- Node Package manager
      + ~ws~ --- websocket package
  + Browser-based
    + The built-in websocket API
    + The built-in 2D canvas API (or the alternative --- SVG API)
+ WebSockets --- To allow full-duplex communication between the client and a server
+ HTML/CSS (minimal usage)
+ SVG or Canvas
+ Git
+ Heroku
+ Development tools
  + Firefox
  + EMACS (for writing the software/documenting the project process)
    + Javascript Mode
    + Org Mode
  
